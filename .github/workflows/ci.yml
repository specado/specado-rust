name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Check code formatting
  fmt:
    name: Rustfmt Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Run clippy linting
  clippy:
    name: Clippy Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run clippy
        run: |
          cargo clippy -p specado-core --all-targets --all-features -- -D warnings
          cargo clippy -p specado-node --all-targets --all-features -- -D warnings

  # Test Rust core library
  test-rust:
    name: Test Rust (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build workspace
        run: |
          cargo build -p specado-core --verbose
          cargo build -p specado-node --verbose
      
      - name: Run tests
        run: |
          cargo test -p specado-core --verbose
          cargo test -p specado-node --verbose
      
      - name: Build release
        run: |
          cargo build -p specado-core --release --verbose
          cargo build -p specado-node --release --verbose

  # Test Python bindings
  test-python:
    name: Test Python Bindings (${{ matrix.os }}, Python ${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-python-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install maturin
        run: |
          python -m pip install --upgrade pip
          pip install maturin pytest
      
      - name: Build Python module
        working-directory: specado-python
        run: maturin build --release
      
      - name: Install Python module
        working-directory: specado-python
        run: |
          pip install target/wheels/*.whl
      
      - name: Run Python tests
        working-directory: specado-python
        run: python test_specado.py
      
      - name: Test import
        run: |
          python -c "import specado; print(f'Specado version: {specado.version()}')"
          python -c "import specado; assert specado.hello_world() == 'Hello from Specado Core!'"

  # Test Node.js bindings
  test-node:
    name: Test Node.js Bindings (${{ matrix.os }}, Node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        node: ['16', '18', '20']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Set up Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-node-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: specado-node/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('specado-node/package-lock.json') }}
      
      - name: Install Node dependencies
        working-directory: specado-node
        run: |
          npm install
          npm install -g @napi-rs/cli
      
      - name: Build Node module
        working-directory: specado-node
        run: npm run build
      
      - name: Run Node tests
        working-directory: specado-node
        run: npm test
      
      - name: Test require
        working-directory: specado-node
        run: |
          node -e "const s = require('.'); console.log('Version:', s.version());"
          node -e "const s = require('.'); console.assert(s.helloWorld() === 'Hello from Specado Core!');"

  # Integration test - verify FFI works across languages
  integration-test:
    name: Integration Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [test-rust, test-python, test-node]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip maturin
          npm install -g @napi-rs/cli
      
      - name: Build all modules
        run: |
          # Build Rust core
          cargo build --all --release
          
          # Build Python module
          cd specado-python
          maturin build --release
          pip install target/wheels/*.whl
          cd ..
          
          # Build Node module
          cd specado-node
          npm install
          npm run build
          cd ..
      
      - name: Run integration test
        run: |
          echo "Testing Python binding..."
          python -c "import specado; print(f'Python: {specado.hello_world()}')"
          
          echo "Testing Node binding..."
          cd specado-node
          node -e "const s = require('.'); console.log('Node:', s.helloWorld());"
          cd ..
          
          echo "All FFI bindings working!"

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit