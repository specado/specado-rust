name: Release

on:
  push:
    tags:
      - "v*"
      - "py-v*"
      - "node-v*"

permissions:
  contents: write
  id-token: write

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
      release_type: ${{ steps.check.outputs.release_type }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          VERSION=${VERSION#py-v}
          VERSION=${VERSION#node-v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Determine release type
        id: check
        env:
          VERSION: ${{ steps.extract.outputs.version }}
        run: |
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=stable" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" =~ -(rc|beta)\.[0-9]+$ ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=prerelease" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" =~ -(alpha|dev)\.[0-9]+$ ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=alpha" >> $GITHUB_OUTPUT
          else
            echo "::warning::Could not determine release type for '$VERSION'. Defaulting to stable."
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=stable" >> $GITHUB_OUTPUT
          fi

      - name: Validate version consistency
        run: |
          CARGO_VERSION=$(awk '/^\[workspace\.package\]/{f=1} f && /^version/{print $3; exit}' Cargo.toml | tr -d '"')
          TAG_VERSION="${{ steps.extract.outputs.version }}"
          BASE_TAG_VERSION=$(echo "$TAG_VERSION" | sed 's/-.*$//')

          echo "Tag version: $TAG_VERSION"
          echo "Base tag version: $BASE_TAG_VERSION"
          echo "Cargo.toml version: $CARGO_VERSION"

          if [[ "$TAG_VERSION" == *"-"* ]]; then
            [[ "$CARGO_VERSION" == "$BASE_TAG_VERSION" ]] || { echo "::error::Version mismatch: $BASE_TAG_VERSION != $CARGO_VERSION"; exit 1; }
          else
            [[ "$CARGO_VERSION" == "$TAG_VERSION" ]] || { echo "::error::Version mismatch: $TAG_VERSION != $CARGO_VERSION"; exit 1; }
          fi

  build-python-wheels:
    needs: validate-version
    if: ${{ !startsWith(github.ref, 'refs/tags/node-v') }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup per-OS OpenSSL env
        uses: ./.github/actions/setup-rust-env
        with:
          os: ${{ matrix.os }}

      - name: Update Cargo.toml version (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          if [[ "$VERSION" == *"-"* ]]; then
            # For pre-release versions, manually update Cargo.toml to avoid cargo-edit downgrade issues
            BASE_VERSION=$(echo "$VERSION" | sed 's/-.*$//')
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" specado-core/Cargo.toml
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" specado-python/Cargo.toml
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" specado-node/Cargo.toml
            echo "Updated Cargo.toml version to: $VERSION"
          fi
        shell: bash

      - name: Update Cargo.toml version (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $VERSION = "${{ needs.validate-version.outputs.version }}"
          if ($VERSION -match "-") {
            # For pre-release versions, manually update Cargo.toml to avoid cargo-edit downgrade issues
            $files = @("Cargo.toml", "specado-core\Cargo.toml", "specado-python\Cargo.toml", "specado-node\Cargo.toml")
            foreach ($file in $files) {
              (Get-Content $file) -replace '^version = ".*"', "version = `"$VERSION`"" | Set-Content $file
            }
            echo "Updated Cargo.toml version to: $VERSION"
          }
        shell: powershell

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - uses: dtolnay/rust-toolchain@stable

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --manifest-path specado-python/Cargo.toml
          manylinux: auto
          before-script-linux: "yum install -y openssl-devel pkgconfig || apt-get update && apt-get install -y libssl-dev pkg-config"

      - name: Build ARM64 wheels (macOS)
        if: matrix.os == 'macos-latest'
        uses: PyO3/maturin-action@v1
        with:
          target: aarch64-apple-darwin
          args: --release --out dist --manifest-path specado-python/Cargo.toml

      - uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ matrix.os }}
          path: dist/*.whl

  publish-python:
    needs: [validate-version, build-python-wheels]
    if: ${{ !startsWith(github.ref, 'refs/tags/node-v') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: python-wheels-*
          merge-multiple: true
          path: dist/
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Twine check
        run: |
          python -m pip install --upgrade pip twine
          python -m twine check dist/*
      - name: Publish to TestPyPI
        if: needs.validate-version.outputs.is_prerelease == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
      - name: Publish to PyPI
        if: needs.validate-version.outputs.is_prerelease == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  build-node-binaries:
    needs: validate-version
    if: ${{ !startsWith(github.ref, 'refs/tags/py-v') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: macos-latest, target: aarch64-apple-darwin }
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
          - {
              os: ubuntu-latest,
              target: aarch64-unknown-linux-gnu,
              cross: true,
            }
          - { os: windows-latest, target: x86_64-pc-windows-msvc }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup per-OS OpenSSL env
        uses: ./.github/actions/setup-rust-env
        with:
          os: ${{ matrix.os }}

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup cross-compilation for Linux ARM64 (zig)
        if: matrix.cross
        run: |
          curl -L https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz | tar -xJ
          sudo mv zig-linux-x86_64-0.11.0 /opt/zig
          sudo ln -s /opt/zig/zig /usr/local/bin/zig
          cargo install cargo-zigbuild
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=zig cc -target aarch64-linux-gnu" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=zig cc -target aarch64-linux-gnu" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=zig c++ -target aarch64-linux-gnu" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=zig ar" >> $GITHUB_ENV

      - name: Install and build
        working-directory: specado-node
        run: |
          npm ci
          npm install -g @napi-rs/cli@latest
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            echo "Running cross-compilation build..."
            # Use cargo-zigbuild for ARM64 cross-compilation
            cargo zigbuild --release --target ${{ matrix.target }}
            # Copy the built library to the expected location
            cp ../target/${{ matrix.target }}/release/libspecado_node.so specado.linux-arm64-gnu.node
          else
            echo "Running native build..."
            napi build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: node-binary-${{ matrix.target }}
          path: specado-node/*.node

  publish-node:
    needs: [validate-version, build-node-binaries]
    if: ${{ !startsWith(github.ref, 'refs/tags/py-v') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
      - name: Update package.json version
        working-directory: specado-node
        run: npm version --no-git-tag-version ${{ needs.validate-version.outputs.version }}
      - name: Install dependencies
        working-directory: specado-node
        run: npm ci
      - uses: actions/download-artifact@v4
        with:
          pattern: node-binary-*
          path: specado-node/
      - name: Set npm tag
        id: npm-tag
        run: |
          case "${{ needs.validate-version.outputs.release_type }}" in
            stable)     echo "tag=latest" >> $GITHUB_OUTPUT ;;
            prerelease) echo "tag=beta"   >> $GITHUB_OUTPUT ;;
            *)          echo "tag=alpha"  >> $GITHUB_OUTPUT ;;
          esac
      - name: Publish to npm
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            cd specado-node
            npm publish --tag ${{ steps.npm-tag.outputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    needs: [validate-version, publish-python, publish-node]
    if: always() && needs.validate-version.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: release-artifacts/
      - name: Generate Release Notes
        id: generate-notes
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          RELEASE_TYPE="${{ needs.validate-version.outputs.release_type }}"
          IS_PRERELEASE="${{ needs.validate-version.outputs.is_prerelease }}"

          RELEASE_BADGE="✅ **Stable release** - Ready for production use"
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            RELEASE_BADGE="🚧 **Pre-release version** - Not recommended for production use"
          fi

          PY_INSTALL="pip install specado==$VERSION"
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            PY_INSTALL="pip install -i https://test.pypi.org/simple/ specado==$VERSION"
          fi

          NODE_INSTALL="npm install specado@$VERSION"
          if [[ "$RELEASE_TYPE" == "alpha" ]]; then
            NODE_INSTALL="npm install specado@alpha"
          elif [[ "$RELEASE_TYPE" == "prerelease" ]]; then
            NODE_INSTALL="npm install specado@beta"
          fi

          NOTES=$(cat .github/release-notes-template.md)
          NOTES="${NOTES//\{\{version\}\}/$VERSION}"
          NOTES="${NOTES//\{\{release_badge\}\}/$RELEASE_BADGE}"
          NOTES="${NOTES//\{\{install_instructions_python\}\}/$PY_INSTALL}"
          NOTES="${NOTES//\{\{install_instructions_node\}\}/$NODE_INSTALL}"

          echo "$NOTES" > release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Specado ${{ needs.validate-version.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.validate-version.outputs.is_prerelease == 'true' }}
          files: |
            release-artifacts/**/*.whl
            release-artifacts/**/*.node
          fail_on_unmatched_files: false
